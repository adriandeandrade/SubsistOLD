<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item sprites
sprite[WOOD] = spr_item_wood;
sprite[ROCK] = spr_item_rock;
sprite[FIBER] = spr_item_fibre;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item objects
object[ROCK] = obj_rock;
object[WOOD] = obj_wood;
object[FIBER] = obj_fiber;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar name;
globalvar sprite;
globalvar object;
globalvar script;
globalvar info_text;
globalvar show_info_box;
globalvar player_sprite;
globalvar weapon_damage;
globalvar shield_defense;
globalvar weapons_knockback;
globalvar item_armor;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init inventory
inventory_height = 3;
inventory_width = 7;
inventory_total_slot = 21;
inventory_slot_max = 100;

globalvar inventory_open;
inventory_open = false;

globalvar canPickup;
canPickup = true;

//Hotbar loop
hotbar_width = 5;
hotbar_amount = 5;
slot_size = 66 + 1;
for(var i = 0; i &lt; hotbar_amount; i++) {
    hotbar_slot[i] = noone;
    hotbar_slot_n[i] = 0;
}

//Inventory loop
inventory_width = 7;
inventory_height = 3;
slot_size = 66 + 1;
for(var i = 0; i &lt; inventory_width; i++) {
    for(var j = 0; j &lt; inventory_height; j++) {
        inventory_slot[i, j] = noone;
        inventory_slot_n[i, j] = 0;
    }
}

globalvar mouse_slot;
globalvar mouse_n;
mouse_slot = noone;
mouse_n = 0;

hotbar_slot[0] = ROCK;
hotbar_slot_n[0] = 35;
hotbar_slot[1] = ROCK;
hotbar_slot_n[1] = 25;
hotbar_slot[2] = WOOD;
hotbar_slot_n[2] = 64;


inventory_slot[0, 0] = ROCK;
inventory_slot_n[0, 0] = 69;
inventory_slot[0, 1] = FIBER;
inventory_slot_n[0, 1] = 69;
inventory_slot[0, 2] = ROCK;
inventory_slot_n[0, 2] = 69;
inventory_slot[0, 3] = ROCK;
inventory_slot_n[0, 3] = 69;
inventory_slot[0, 4] = FIBER;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canPickup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get x and y offset
ww = display_get_gui_width();
wh = display_get_gui_height();

// INVENTORY
inventory_x_off = ww / 2 - (sprite_get_width(spr_inventory) / 2);

inventory_y_off = wh / 2 - (sprite_get_height(spr_inventory) / 2);
inventory_y_off_r = inventory_y_off + (67 * 4) + 33

//Character offset
character_x = ww / 2;
character_y = wh / 2;

//Hotbar
if(!inventory_open) {
    hotbar_x_off = ww / 2 - 169;
    hotbar_y_off = wh - 73;
}
else {
    hotbar_x_off = inventory_x_off + 66;
    hotbar_y_off = inventory_y_off + sprite_get_height(spr_inventory) - 73;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take 1 of item
dmx = device_mouse_x_to_gui(0);
dmy = device_mouse_y_to_gui(0);

if(dmx &gt; hotbar_x_off) and (dmx &lt; hotbar_x_off + hotbar_width * slot_size) and (dmy &gt; hotbar_y_off) and (dmy &lt; hotbar_y_off + slot_size) {
    var xx = (dmx - hotbar_x_off) div slot_size;
    var yy = (dmy - hotbar_y_off) div slot_size;
    var slot_clicked = xx + yy;
    
    if(hotbar_slot[slot_clicked] != noone) and (hotbar_slot[slot_clicked] == mouse_slot or mouse_slot == noone) {
        mouse_slot = hotbar_slot[slot_clicked]
        mouse_n += 1;
        
        hotbar_slot_n[slot_clicked] -= 1;
        
        if(hotbar_slot_n[slot_clicked] == 0) {
            hotbar_slot[slot_clicked] = noone;
        }
    }
    else if(hotbar_slot[slot_clicked] == noone) {
        hotbar_slot[slot_clicked] = mouse_slot;
        hotbar_slot_n[slot_clicked] += 1;
        
        mouse_n -= 1;
        
        if(mouse_n == 0) {
            mouse_slot = noone;
        }
    }
}
else if(inventory_open) and (dmx &gt; inventory_x_off) and (dmx &lt; inventory_x_off + (inventory_width * slot_size)) and (dmy &gt; inventory_y_off_r) and (dmy &lt;  inventory_y_off_r + (inventory_height * slot_size)) {
    var xx = (dmx - inventory_x_off) div slot_size;
    var yy = (dmy - inventory_y_off_r) div slot_size;
    
    if(inventory_slot[xx, yy] != noone) and (inventory_slot[xx, yy] == mouse_slot or mouse_slot == noone) {
        mouse_slot = inventory_slot[xx, yy];
        mouse_n += 1;
        
        inventory_slot_n[xx, yy] -= 1;
        
        if(inventory_slot_n[xx, yy] == 0) {
            inventory_slot[xx, yy] = noone;
        }
    }
    else if(inventory_slot[xx, yy] == noone) {
        inventory_slot[xx, yy] = mouse_slot;
        inventory_slot_n[xx, yy] += 1;
        
        mouse_n -= 1;
        
        if(mouse_n == 0) {
            mouse_slot = noone;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_slot == noone) {
    ///Click on slot and drag item
    dmx = device_mouse_x_to_gui(0);
    dmy = device_mouse_y_to_gui(0);
    
    if(dmx &gt; hotbar_x_off) and (dmx &lt; hotbar_x_off + hotbar_width * slot_size) and (dmy &gt; hotbar_y_off) and (dmy &lt; hotbar_y_off + slot_size) {
        var xx = (dmx - hotbar_x_off) div slot_size;
        var yy = (dmy - hotbar_y_off) div slot_size;
        var slot_clicked = xx + yy;
        
        mouse_slot = hotbar_slot[slot_clicked];
        mouse_n = hotbar_slot_n[slot_clicked];
        hotbar_slot[slot_clicked] = noone;
        hotbar_slot_n[slot_clicked] = 0;
    }
    else if(inventory_open) and (dmx &gt; inventory_x_off) and (dmx &lt; inventory_x_off + (inventory_width * slot_size)) and (dmy &gt; inventory_y_off_r) and (dmy &lt;  inventory_y_off_r + (inventory_height * slot_size)) {
        var xx = (dmx - inventory_x_off) div slot_size;
        var yy = (dmy - inventory_y_off_r) div slot_size;
        
        mouse_slot = inventory_slot[xx, yy];
        mouse_n = inventory_slot_n[xx, yy];
        inventory_slot[xx, yy] = noone;
        inventory_slot_n[xx, yy] = 0;
    }
}
else {
    ///Release item on slot or ground
    dmx = device_mouse_x_to_gui(0);
    dmy = device_mouse_y_to_gui(0);
    
    if (dmx &gt; hotbar_x_off) and (dmx &lt; hotbar_x_off + hotbar_width * slot_size) and (dmy &gt; hotbar_y_off) and (dmy &lt; hotbar_y_off + slot_size) {
        var xx = (dmx - hotbar_x_off) div slot_size;
        var yy = (dmy - hotbar_y_off) div slot_size;
        var slot_clicked = xx + yy;
        
        var remaining = scr_hotbar_add_item(slot_clicked, mouse_slot, mouse_n);
        
        if(remaining == 0) {
            mouse_slot = noone;
            mouse_n = 0;
        } else {
            mouse_n = remaining;
        }
    }
    else if(inventory_open) and (dmx &gt; inventory_x_off) and (dmx &lt; inventory_x_off + (inventory_width * slot_size)) and (dmy &gt; inventory_y_off_r) and (dmy &lt;  inventory_y_off_r + (inventory_height * slot_size)) {
        var xx = (dmx - inventory_x_off) div slot_size;
        var yy = (dmy - inventory_y_off_r) div slot_size;
        
        var remaining = scr_inventory_add_item(xx, yy, mouse_slot, mouse_n)
        
        if(remaining == 0) {
            mouse_slot = noone;
            mouse_n = 0;
        } else {
            mouse_n = remaining;
        }
    }
    else if(place_free(mouse_x, mouse_y)) {
        for(i = 0; i &lt; mouse_n; i++) {
            canPickup = false;
            alarm[0] = 180;
            instance_create(obj_player.x, obj_player.y + 20, object[mouse_slot]);
        }
        mouse_slot = noone;
        mouse_n = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw inventory
dmx = device_mouse_x_to_gui(0);
dmy = device_mouse_y_to_gui(0);

//Draw hotbar
if(inventory_open) {
    draw_sprite_ext(spr_hotbar, 0, hotbar_x_off, hotbar_y_off, 1, 1 , 0, c_white, 0.8);
  } else {
    draw_sprite(spr_hotbar, 0, hotbar_x_off, hotbar_y_off);
  }

//Draw inventory sprite
if(inventory_open) {
    draw_sprite_ext(spr_inventory, 0, inventory_x_off + 2, inventory_y_off + 2, 1, 1, 0, c_black, .3);
    draw_sprite_ext(spr_inventory, 0, inventory_x_off, inventory_y_off, 1, 1, 0, c_white, .8);
    //Draw items in inventory
    for(var i = 0; i &lt; inventory_width; i++) {
        for(var j = 0; j &lt; inventory_height; j++) {
            if(inventory_slot[i, j] != noone) {
                draw_sprite_ext(sprite[inventory_slot[i, j]], 0, inventory_x_off + (i * slot_size) + 12 + 2, inventory_y_off_r + (j * slot_size) + 12 + 2, 2, 2, 0, c_black, .3);
                draw_sprite_ext(sprite[inventory_slot[i, j]], 0, inventory_x_off + (i * slot_size) + 12, inventory_y_off_r + (j * slot_size) + 12, 2, 2, 0, c_white, 1);
                draw_set_font(fnt_hud);
                draw_set_color(c_white);
                draw_text(inventory_x_off + (i * slot_size) + 8, inventory_y_off_r + (j * slot_size) + 53, string(inventory_slot_n[i, j]));
                draw_set_font(-1);
                draw_set_color(-1);
            }
        }
    }
}

//Draw items hotbar
for(i = 0; i &lt; hotbar_amount; i++) {
    var xx = i mod hotbar_width;
    var yy = i div hotbar_width;

    if(hotbar_slot[i] != noone) {
        draw_sprite_ext(sprite[hotbar_slot[i]], 0, hotbar_x_off + xx * slot_size + 12 + 2, hotbar_y_off + yy * slot_size + 12 + 2, 2, 2, 0, c_black, .3);
        draw_sprite_ext(sprite[hotbar_slot[i]], 0, hotbar_x_off + xx * slot_size + 12, hotbar_y_off + yy * slot_size + 12, 2, 2, 0, c_white, 1);
        draw_set_font(fnt_hud);
        draw_set_color(c_white);
        draw_text(hotbar_x_off + xx * slot_size + 8, hotbar_y_off + yy * slot_size + 53, string(hotbar_slot_n[i]));
        draw_set_font(-1);
        draw_set_color(-1);
    }
}

//Draw items when holding with mouse
if(mouse_slot != noone) {
    draw_sprite_ext(sprite[mouse_slot], 0, dmx - 28 + 2, dmy - 25 + 2, 2, 2, 0, c_black, .3);
    draw_sprite_ext(sprite[mouse_slot], 0, dmx - 28, dmy - 25, 2, 2, 0, c_white, 1);
    draw_set_font(fnt_hud);
    draw_set_color(c_white);
    draw_text(dmx - 20, dmy + 2, string(mouse_n));
}

///Draw Player in center of inventory
if(inventory_open) {
    //Draw the player
    draw_sprite_ext(spr_player_idle_down, 1, character_x, character_y - 130, 9, 9, 0, c_white, 1);
}

draw_sprite_ext(spr_mouse_cursor, 0, dmx + 2, dmy + 2, 1, 1, 0, c_white, .3);
draw_sprite_ext(spr_mouse_cursor, 0, dmx, dmy, 1, 1, 0, c_white, 1);






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle visible inventory window
inventory_open = !inventory_open;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
